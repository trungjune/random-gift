import { useState } from "react";
import { maleGiftGivers, femaleRecipients, gifts } from "../data/giftData";
import { wishTemplates } from "../data/wishTemplates";

export const useGiftRandomizer = () => {
  const [recipientName, setRecipientName] = useState("");
  const [isSpinning, setIsSpinning] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [showResult, setShowResult] = useState(false);

  // L∆∞u tr·ªØ l·ªãch s·ª≠ ƒë·ªÉ tr√°nh tr√πng l·∫∑p
  const [usedWishes, setUsedWishes] = useState([]);
  const [usedGivers, setUsedGivers] = useState([]);

  const getRandomItem = (array) => {
    return array[Math.floor(Math.random() * array.length)];
  };

  // L·∫•y l·ªùi ch√∫c kh√¥ng tr√πng trong 10 l·∫ßn g·∫ßn nh·∫•t
  const getUniqueWish = (giverName, recipientName) => {
    // L·ªçc ra nh·ªØng l·ªùi ch√∫c ch∆∞a d√πng trong 10 l·∫ßn g·∫ßn nh·∫•t
    const availableWishes = [];
    for (let i = 0; i < wishTemplates.length; i++) {
      if (!usedWishes.includes(i)) {
        availableWishes.push({ index: i, wish: wishTemplates[i] });
      }
    }

    // N·∫øu ƒë√£ d√πng h·∫øt ho·∫∑c c√≤n qu√° √≠t, reset l·∫°i nh∆∞ng gi·ªØ l·∫°i l·ªùi ch√∫c v·ª´a d√πng
    if (availableWishes.length <= 1) {
      const lastUsed = usedWishes[usedWishes.length - 1];
      setUsedWishes(lastUsed !== undefined ? [lastUsed] : []);
      
      // L·ªçc l·∫°i, lo·∫°i tr·ª´ l·ªùi ch√∫c v·ª´a d√πng
      const resetWishes = [];
      for (let i = 0; i < wishTemplates.length; i++) {
        if (i !== lastUsed) {
          resetWishes.push({ index: i, wish: wishTemplates[i] });
        }
      }
      
      if (resetWishes.length > 0) {
        const selected = getRandomItem(resetWishes);
        setUsedWishes([lastUsed, selected.index].filter(x => x !== undefined));
        return selected.wish
          .replace(/{giver}/g, giverName)
          .replace(/{recipient}/g, recipientName);
      }
    }

    const selected = getRandomItem(availableWishes);

    // C·∫≠p nh·∫≠t danh s√°ch ƒë√£ d√πng, gi·ªØ t·ªëi ƒëa 10 l·∫ßn g·∫ßn nh·∫•t
    setUsedWishes((prev) => {
      const newUsed = [...prev, selected.index];
      // Gi·ªØ 10 l·∫ßn g·∫ßn nh·∫•t, ho·∫∑c √≠t h∆°n n·∫øu t·ªïng s·ªë l·ªùi ch√∫c < 10
      const keepCount = Math.min(10, wishTemplates.length - 1);
      return newUsed.slice(-keepCount);
    });

    return selected.wish
      .replace(/{giver}/g, giverName)
      .replace(/{recipient}/g, recipientName);
  };

  // L·∫•y ng∆∞·ªùi t·∫∑ng kh√¥ng tr√πng trong 10 l·∫ßn g·∫ßn nh·∫•t v√† kh√¥ng tr√πng ng∆∞·ªùi nh·∫≠n
  const getUniqueGiver = (recipientName) => {
    let availableGivers = maleGiftGivers.filter(
      (giver) => giver !== recipientName && !usedGivers.includes(giver)
    );

    // N·∫øu kh√¥ng c√≤n ai kh·∫£ d·ª•ng, reset danh s√°ch ƒë√£ d√πng
    if (availableGivers.length === 0) {
      setUsedGivers([]);
      availableGivers = maleGiftGivers.filter(
        (giver) => giver !== recipientName
      );
    }

    const selectedGiver = getRandomItem(availableGivers);

    // C·∫≠p nh·∫≠t danh s√°ch ƒë√£ d√πng, ch·ªâ gi·ªØ 10 l·∫ßn g·∫ßn nh·∫•t
    setUsedGivers((prev) => {
      const newUsed = [...prev, selectedGiver];
      return newUsed.slice(-10);
    });

    return selectedGiver;
  };

  const handleSpin = () => {
    if (!recipientName.trim()) {
      alert("Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n qu√†! üíï");
      return;
    }

    const inputName = recipientName.trim();

    // Ch·ªâ cho ph√©p nam t·∫∑ng n·ªØ - ki·ªÉm tra t√™n c√≥ trong danh s√°ch 8 n·ªØ kh√¥ng
    const isInFemaleList = femaleRecipients.includes(inputName);

    if (!isInFemaleList) {
      alert(
        `Ch·ªâ c√≥ th·ªÉ ch·ªçn qu√† cho 8 ch·ªã em ph·ª• n·ªØ trong danh s√°ch:\n${femaleRecipients.join(
          ", "
        )} üíï`
      );
      return;
    }

    // B·∫Øt ƒë·∫ßu v·ªõi m√†n h√¨nh loading
    setIsLoading(true);
    setShowResult(false);
    setResult(null);
  };

  const handleLoadingComplete = (selectedGiver = null) => {
    setIsLoading(false);
    // B·ªè m√†n spinning, chuy·ªÉn th·∫≥ng sang k·∫øt qu·∫£
    
    const selectedGift = getRandomItem(gifts);
    // S·ª≠ d·ª•ng ng∆∞·ªùi t·∫∑ng qu√† t·ª´ LoadingScreen, n·∫øu kh√¥ng c√≥ th√¨ d√πng logic c≈©
    const finalGiver = selectedGiver || getUniqueGiver(recipientName);
    const selectedWish = getUniqueWish(finalGiver, recipientName);

    // C·∫≠p nh·∫≠t danh s√°ch ƒë√£ d√πng v·ªõi ng∆∞·ªùi t·∫∑ng qu√† ƒë∆∞·ª£c ch·ªçn
    if (selectedGiver) {
      setUsedGivers((prev) => {
        const newUsed = [...prev, selectedGiver];
        return newUsed.slice(-10);
      });
    }

    const newResult = {
      gift: selectedGift,
      wish: selectedWish,
      giver: finalGiver,
      recipient: recipientName,
    };

    setResult(newResult);
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ ngay sau m·ªôt ch√∫t delay nh·ªè
    setTimeout(() => setShowResult(true), 300);
  };

  const resetGame = () => {
    setResult(null);
    setShowResult(false);
    setIsLoading(false);
    setIsSpinning(false);
    setRecipientName("");
  };

  return {
    recipientName,
    setRecipientName,
    isSpinning,
    isLoading,
    result,
    showResult,
    handleSpin,
    handleLoadingComplete,
    resetGame,
    maleGiftGivers,
    femaleRecipients,
    gifts,
  };
};